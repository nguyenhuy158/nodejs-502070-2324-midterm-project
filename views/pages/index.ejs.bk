<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Title</title>

    <style>
        video {
            border: 1px solid #000;
        }
    </style>
</head>
<body>

<video
        autoplay
        id="localVideo"
        height="300"
        width="300"
></video>

<video
        autoplay
        id="remoteVideo"
        height="300"
        width="300"
></video>

<button id="mute-audio">Mute</button>
<button id="off-cam">Off cam</button>
<button id="share-screen">Share your screen</button>
<hr>
<label for="cam-op">Camera option</label>
<select name="" id="cam-op"></select>
<hr>
<label for="mic-op">Mic option</label>
<select name="" id="mic-op"></select>

<script src="https://code.jquery.com/jquery-3.7.1.slim.js"></script>
<script src="/socket.io/socket.io.js"></script>
<!-- <script src="https://cdn.socket.io/4.6.0/socket.io.min.js" integrity="sha384-c79GN5VsunZvi+Q/WObgk2in0CbZsHnjEqvFxC5DxHn9lTfNce2WW6h2pH6u/kF+" crossorigin="anonymous"></script> -->
<script>
    const roomId = "<%= roomId %>";
    console.log(roomId);
</script>
<script>

    //socket init
    const socket = io();

    let mediaSteam;
    let muteAudio = false;
    let offCam    = false;
    let RTC;
    let peerConnection;
    let localStream;

    async function createOffer() {
        try {
            const offer = await peerConnection.createOffer();
            await peerConnection.setLocalDescription(offer);
            socket.emit("offer", roomId, offer);
        } catch (error) {
            console.error("Error creating offer:", error);
        }
    }

    socket.on("offer", (offer) => {
        peerConnection.setRemoteDescription(new RTCSessionDescription(offer))
                      .then(() => {
                          return peerConnection.createAnswer();
                      })
                      .then((answer) => {
                          return peerConnection.setLocalDescription(answer);
                      })
                      .then(() => {
                          socket.emit("answer", roomId, peerConnection.localDescription);
                      })
                      .catch((error) => {
                          console.error("Error creating and sending answer:", error);
                      });
    });

    socket.on("answer", (answer) => {
        peerConnection.setRemoteDescription(new RTCSessionDescription(answer));
    });

    socket.on("ice-candidate", (candidate) => {
        if (candidate) {
            const iceCandidate = new RTCIceCandidate(candidate);
            peerConnection.addIceCandidate(iceCandidate)
                          .catch((error) => {
                              console.error("Error adding ICE candidate:", error);
                          });
        }
    });
    
    async function getMedia(cameraId, micId, screen) {
        const init             = {
            video: true,
            audio: true
        };
        const initWithCameraId = {
            video: { deviceId: { exact: cameraId } },
            audio: true
        };
        const initWithMicId    = {
            video: true,
            audio: { deviceId: micId }
        };
        const condition        = cameraId || micId ? cameraId ? initWithCameraId : initWithMicId : init;
        mediaSteam             = await window.navigator.mediaDevices.getUserMedia(condition);
        console.log("=>(index.html:15) mediaSteam", mediaSteam);
        document.getElementById("localVideo").srcObject = screen ? screen : mediaSteam;
        document.getElementById("localVideo")
                .addEventListener(
                    "loadedmetadata",
                    () => {
                        document.getElementById("localVideo")
                                .play();
                    }
                );

        makeWebRTCConnection();
    }

    function initializeWebRTC() {
        peerConnection = new RTCPeerConnection();

        peerConnection.addStream(localStream);

        peerConnection.onicecandidate = (event) => {
            if (event.candidate) {
                socket.emit("ice-candidate", roomId, event.candidate);
            }
        };

        peerConnection.onaddstream = (event) => {
            const remoteVideo     = document.getElementById("remoteVideo");
            remoteVideo.srcObject = event.stream;
        };

        createOffer();
    }

    $("#mute-audio")
        .on("click", function () {
            mediaSteam.getAudioTracks()
                      .forEach(track => track.enabled = muteAudio);
            $(this)
                .text(muteAudio);

            muteAudio = !muteAudio;
        });
    
    $("#off-cam")
        .on("click", function () {
            mediaSteam.getVideoTracks()
                      .forEach(track => track.enabled = offCam);
            $(this)
                .text(offCam);

            offCam = !offCam;
        });
    
    async function getAllCamera() {
        const allDevices = await window.navigator.mediaDevices.enumerateDevices();
        console.log("=>(index.html:66) allDevices", allDevices);
        allDevices.forEach(devices => {
            if (devices.kind === "videoinput") {
                const option = $(`<option value="${devices.deviceId}">${devices.label}</option>`);
                $("#cam-op")
                    .append(option);
            }
        });
        
        $("#cam-op")
            .on("input", function () {
                const deviceId = $(this)
                    .val();
                console.log("=>(index.html:79) deviceId", deviceId);
                getMedia(deviceId, undefined);
            });
    }
    
    async function getAllMic() {
        const allDevices = await window.navigator.mediaDevices.enumerateDevices();
        console.log("=>(index.html:66) allDevices", allDevices);
        allDevices.forEach(devices => {
            if (devices.kind === "audioinput") {
                const option = $(`<option value="${devices.deviceId}">${devices.label}</option>`);
                $("#mic-op")
                    .append(option);
            }
        });
        
        $("#mic-op")
            .on("input", function () {
                const deviceId = $(this)
                    .val();
                console.log("=>(index.html:79) deviceId", deviceId);
                getMedia(undefined, deviceId);
            });
    }
    
    // let mediaStream;
    
    $("#share-screen")
        .on("click", async function getScreenMedia() {
            try {
                let screen = await window.navigator.mediaDevices.getDisplayMedia({
                                                                                     video: true,
                                                                                     audio: true,
                                                                                 });
                await getMedia(undefined, undefined, screen);
            } catch (e) {
                console.log("=>(index.html:129) e", e);
            }
        });
    
    getMedia();
    getAllCamera();
    getAllMic();

    socket.emit("joinRoom", roomId);
    socket.on("newJoining", () => {
        console.log("new join");
    });

    function makeWebRTCConnection() {
        RTC = new RTCPeerConnection();
        console.log(mediaSteam.getTracks());
    }

</script>
</body>
</html>